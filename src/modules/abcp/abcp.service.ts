import { Inject, Injectable, Logger, NotFoundException } from "@nestjs/common";
import type { ConfigType } from "@nestjs/config";

import { abcpHttpRequest } from "@/modules/abcp/utils/abcp-http-client";
import { generateBasketHash } from "@/modules/abcp/utils/hash";
import { PrismaService } from "@/modules/prisma/prisma.service";

import abcpConfig from "@/config/abcp.config";

import type {
  ArticleInfoDto,
  CrossItemDto,
  LocalOffer,
  LocalOfferGroup,
} from "./dto/article-info.dto";

@Injectable()
export class AbcpService {
  private readonly logger = new Logger(AbcpService.name);

  constructor(
    @Inject(abcpConfig.KEY)
    private readonly config: ConfigType<typeof abcpConfig>,
    private readonly prisma: PrismaService,
  ) {}

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ ABCP API —á–µ—Ä–µ–∑ –æ–±—â–∏–π HTTP-–∫–ª–∏–µ–Ω—Ç.
   *
   * –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤—ã–∑–æ–≤ `abcpHttpRequest`, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—è
   * –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è.
   *
   * @param endpoint - –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/articles/info")
   * @param params - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–∞—Ä—Ç–∏–∫—É–ª, –±—Ä–µ–Ω–¥ –∏ —Ç.–¥.)
   *
   * @returns –û—Ç–≤–µ—Ç –æ—Ç ABCP API
   *
   * @throws InternalServerErrorException - –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
   */
  private async performRequest(
    endpoint: string,
    params: Record<string, any>,
  ): Promise<any> {
    const { host, login, password } = this.config;

    return abcpHttpRequest({
      host,
      login,
      password,
      endpoint,
      params,
    });
  }

  async getBrandsDictionary(): Promise<any> {
    return this.performRequest("/articles/brands", {});
  }

  async searchBrands(number: string): Promise<any> {
    return this.performRequest("/search/brands", { number });
  }

  async getSearchTips(number: string): Promise<any> {
    return this.performRequest("/search/tips", { number });
  }

  async getArticleInfo(
    brand: string,
    number: string,
    format = "bnphic",
    locale = "ru_RU",
  ): Promise<any> {
    const data = await this.performRequest("/articles/info", {
      brand,
      number,
      format,
      locale,
    });

    if (data?.images?.length) {
      this.logger.log(
        `üì∏ Images found for ${brand} ${number}: ${JSON.stringify(data.images)}`,
      );
      data.images = data.images.map((img) => ({
        name: img.name,
        url: `https://pubimg.nodacdn.net/images/${img.name}`,
      }));
    } else {
      this.logger.warn(`‚ùå No images found for ${brand} ${number}`);
    }

    return data;
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è
   * –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ü–µ–Ω—ã –≤ offer_price –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ priceListId.
   */
  async getEnrichedArticleInfo(
    brand: string,
    number: string,
    userId: number,
    format = "bnphic",
    locale = "ru_RU",
  ): Promise<ArticleInfoDto> {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { id: true, priceListId: true },
    });
    if (!user) throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");

    const priceListId = user.priceListId ?? 1;

    const abcpData = await this.getArticleInfo(brand, number, format, locale);

    const crossItems: CrossItemDto[] = [
      { brand: abcpData.brand, number: abcpData.number },
      ...(abcpData.crosses ?? []),
    ];

    const originalArticle = abcpData.numberFix ?? abcpData.number;

    // –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–∞–π—Å—É
    const allOffers = await this.loadLocalOffers(crossItems, priceListId);

    const sortByWarehouseFirstThenPrice = <
      T extends { supplierId: number; price: number },
    >(
      a: T,
      b: T,
    ): number => {
      const isAOur = a.supplierId === 0;
      const isBOur = b.supplierId === 0;
      if (isAOur && !isBOur) return -1;
      if (!isAOur && isBOur) return 1;
      return a.price - b.price;
    };

    return {
      brand: abcpData.brand,
      number: abcpData.number,
      descr: abcpData.descr ?? "",
      properties: abcpData.properties,
      images: abcpData.images?.map((img: any) => img.url) ?? [],
      crosses: abcpData.crosses ?? [],
      localOffers: [
        {
          groupName: "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π) –∞—Ä—Ç–∏–∫—É–ª",
          items: allOffers
            .filter((g) => g.number === originalArticle)
            .map((group) => ({
              ...group,
              offers: [...group.offers].sort(sortByWarehouseFirstThenPrice),
            })),
        },
        {
          groupName: "–ê–Ω–∞–ª–æ–≥–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏) –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞",
          items: allOffers
            .filter((g) => g.number !== originalArticle)
            .flatMap((group) =>
              group.offers.map((offer) => ({
                ...group,
                offers: [offer],
              })),
            )
            .sort((a, b) =>
              sortByWarehouseFirstThenPrice(a.offers[0], b.offers[0]),
            ),
        },
      ],
    };
  }

  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —Å–ø–∏—Å–∫—É (brand, number) —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   * –ø–æ –Ω—É–∂–Ω–æ–º—É priceListId. –ï—Å–ª–∏ —Ü–µ–Ω—ã –≤ offer_price –Ω–µ—Ç ‚Äî –æ—Ñ—Ñ–µ—Ä –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç.
   */
  private async loadLocalOffers(
    crosses: CrossItemDto[],
    priceListId: number,
  ): Promise<LocalOfferGroup[]> {
    const brandNames = [
      ...new Set(crosses.map((c) => c.brand).filter(Boolean)),
    ];
    const articles = [...new Set(crosses.map((c) => c.number).filter(Boolean))];

    if (!brandNames.length || !articles.length) return [];

    const brands = await this.prisma.brands.findMany({
      where: { name: { in: brandNames } },
      select: { id: true, name: true },
    });

    const skuRecords = await this.prisma.sku.findMany({
      where: {
        article: { in: articles },
        brandId: { in: brands.map((b) => b.id) },
      },
      include: { brand: true },
    });

    const skuIds = skuRecords.map((s) => s.id);
    if (!skuIds.length) return [];

    // 1) –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    const [offerPrices, suppliersOffers] = await Promise.all([
      this.prisma.offerPrice.findMany({
        where: { skuId: { in: skuIds }, priceListId },
        select: { skuId: true, supplierId: true, price: true },
      }),
      this.prisma.suppliersOffers.findMany({
        where: { skuId: { in: skuIds } },
        select: {
          skuId: true,
          supplierId: true,
          basePrice: true,
          qty: true,
          supplier: { select: { deliveryDays: true } },
        },
      }),
    ]);

    // –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–µ–ª–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ü–µ–Ω –ø–æ (skuId, supplierId)
    const priceKey = (skuId: number, supplierId: number) =>
      `${skuId}:${supplierId}`;
    const priceMap = new Map<string, number>();
    for (const p of offerPrices) {
      priceMap.set(priceKey(p.skuId, p.supplierId), p.price);
    }

    return skuRecords.map((sku): LocalOfferGroup => {
      const offers: LocalOffer[] = [];

      // –≤—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –ø–æ SKU (–µ—Å—Ç—å basePrice/qty)
      const supplierEntries = suppliersOffers.filter((s) => s.skuId === sku.id);

      for (const s of supplierEntries) {
        if (s.qty <= 0) continue;

        // —Ü–µ–Ω–∞ –∏–∑ offer_price –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
        const price = priceMap.get(priceKey(sku.id, s.supplierId));
        if (price == null) continue; // –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ offer_price ‚Äî –æ—Ñ—Ñ–µ—Ä —Å–∫—Ä—ã–≤–∞–µ–º

        const deliveryDays = s.supplier?.deliveryDays ?? 0;

        const hash = generateBasketHash(
          sku.id,
          s.supplierId,
          s.basePrice, // basePrice –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –≤ hash/–ë–î
          price, // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ü–µ–Ω–∞ –∏–∑ offer_price
          s.qty,
          deliveryDays,
        );

        offers.push({
          skuId: sku.id,
          supplierId: s.supplierId,
          basePrice: s.basePrice,
          price,
          qty: s.qty,
          hash,
          deliveryDays,
        });
      }

      return {
        brand: sku.brand.name,
        number: sku.article,
        offers,
      };
    });
  }
}
