import { Logger } from "@nestjs/common";
import axios, { AxiosError } from "axios";

interface AbcpRequestParams {
  host: string;
  login: string;
  password: string;
  endpoint: string;
  params?: Record<string, any>;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ API ABCP —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
 *
 * @param host - –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å API (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://abcp.ru)
 * @param login - –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ABCP
 * @param password - –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ABCP (—É–∂–µ –≤ md5, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
 * @param endpoint - –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/articles/info")
 * @param params - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–∞—Ä—Ç–∏–∫—É–ª, –±—Ä–µ–Ω–¥ –∏ —Ç.–¥.)
 *
 * @returns JSON-–æ—Ç–≤–µ—Ç –æ—Ç ABCP API –≤ –≤–∏–¥–µ –¥–∂–µ–Ω–µ—Ä–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é any)
 *
 * @throws Error - –í —Å–ª—É—á–∞–µ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–¥–æ–º ‚â† 200
 */
export async function abcpHttpRequest<T = any>({
  host,
  login,
  password,
  endpoint,
  params = {},
}: AbcpRequestParams): Promise<T> {
  const logger = new Logger("AbcpHttpClient");

  logger.log(`üöÄ Requesting ABCP API: ${endpoint}`);
  logger.debug(`üìå Params: ${JSON.stringify(params)}`);

  try {
    const response = await axios.get(`${host}${endpoint}`, {
      params: {
        userlogin: login,
        userpsw: password,
        ...params,
      },
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        Accept: "application/json",
      },
      validateStatus: (status) => status < 500,
    });

    if (response.status === 404) {
      logger.warn(`‚ö†Ô∏è –ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (404): ${endpoint}`);
      return {} as T;
    }

    if (response.status !== 200) {
      logger.error(`‚ùå API error ${response.status}: ${response.statusText}`);
      throw new Error("–û—à–∏–±–∫–∞ –æ—Ç ABCP API");
    }

    logger.log(`‚úÖ Response received: ${endpoint}`);
    return response.data as T;
  } catch (error: any) {
    const axiosError = error as AxiosError;
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ abcpHttpRequest: ${axiosError.message}`);
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ ABCP API");
  }
}
